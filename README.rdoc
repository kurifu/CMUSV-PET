== Progress
=== Iteration 2:
Story cards completed:
- Story Card 15, “As a user, I can view the project phase page.  As a user, I can see all deliverables associated with each phase.”
- Story Card 10, “As a user, I can provide deliverable size and production rate to PET and expect PET to calculate effort with the correct equation”
- Story Card 14, “As a user, I could view the project estimation screen, which shows accurate estimates for every phase of the project”
- Story Card 11, “As a user, I can add a new deliverable type if it is not provided in the list”
- Story Card 12, “As a user, I can select a measurement type for a new deliverable type from a drop down list.”
- Story Card 9, “As a user, I can provide deliverable complexity and type to PET and expect PET to provide the unit of measurement”

=== Iteration1:
Story cards completed:
- Story Card 3, "As a user, I can create a project and enter name, description and lifecycle"
- Story Card 8, "As a user, I can add a new deliverable type from the existing list of deliverable types.  As a user, I can enter name, description, complexity, estimated size and production rate to the new deliverable."

Story cards in progress:
- Story Card 15, "As a user, I can view the project phase page.  As a user, I can see all deliverables associated with each phase."
	 Missing one or two RSpec tests before complete
- Story Card 10, "As a user, I can provide deliverable size and production rate to PET and expect PET to calculate effort with the correct equation"

== Getting Started
Get the source code on github, using the following command:
     git clone git@github.com:cmusv/Fall-2010-FSE-Rail-Blazers.git

Bundle and DB setup
     bundle install
     bundle exec rake db:schema:load
     bundle exec rake db:setup (to load the seeds.rb data)

== Key design decisions

Team Rail Blazers made the decision to use xml to store static data.
Disadvantages of using DB:
- Accessing DB is a “cost” from a real life project
- Consumes a bit of memory each access

Solution: put static data in XML files
- We will have accessor methods to pull out the data from XML, then store these values into Dyanmic Tables

Advantages of this Approach:
- Static data does not affect and will not be affected by Dynamic data; completely separate
- We avoid joining 4 tables when looking up an entry in the Deliverables table; the static data will already be there because we already populated them

Static Tables to be Turned into XML Files:
- Lifecycle
- Phase
- Deliverable_Type
- Unit of Measurement

XML Accessor Methods:
- Will need to parse XML file and return one or more values in one or more formats (single value, array, array of specific values, etc)

== Database design

Deliverables Tables
Project_id  Deliverable_id  lifecycle   phase   deliverable_type deliverable_name    deliverable_desc deliverable_url complexity  unit_of_measurement estimated_size  production_rate estimated_effort


Projects Table
project_id  project_name    project_desc    project_status  lifecycle